function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:attributes, :notes),Tuple{Attributes,Array{Note,1}}},Type{Measure}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:channel, :program, :volume, :pan, :id),Tuple{Int64,Int64,Int64,Int64,String}},Type{MidiInstrument}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:measures, :id),Tuple{Array{Measure,1},String}},Type{Part}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:name, :midiinstrument, :id),Tuple{String,MidiInstrument,String}},Type{ScorePart}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:partlist, :parts),Tuple{PartList,Array{Part,1}}},Type{ScorePartwise}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:pitch, :duration),Tuple{Pitch,Int64}},Type{Note}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:pitch, :duration, :chord),Tuple{Pitch,Int64,Chord}},Type{Note}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:rest, :duration),Tuple{Rest,Int64}},Type{Note}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:scoreparts,),Tuple{Array{ScorePart,1}}},Type{PartList}})
    Base.precompile(Tuple{Core.kwftype(typeof(MusicXML.Type)),NamedTuple{(:time, :divisions, :clef, :staves, :key),Tuple{Time,Int64,Array{Clef,1},Int64,Key}},Type{Attributes}})
    Base.precompile(Tuple{typeof(Base.vect),Note,Vararg{Note,N} where N})
    Base.precompile(Tuple{typeof(println),Base.PipeEndpoint,Pitch})
    Base.precompile(Tuple{typeof(println),Pitch})
    Base.precompile(Tuple{typeof(readmusicxml),String})
    Base.precompile(Tuple{typeof(vcat),Measure,Measure})
end
