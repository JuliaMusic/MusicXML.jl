var documenterSearchIndex = {"docs":
[{"location":"types.html#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"types.html#","page":"Types","title":"Types","text":"ScorePartwise\n\tpartlist (PartList)\n\t\tscoreparts (Vector{ScorePart})\n\t\t\tname\n\t\t\tid\n\t\t\tscoreinstrument (ScoreInstrument)\n\t\t\t\tname\n\t\t\t\tid\n\t\t\tmididevice (MidiDevice)\n\t\t\t\tport\n\t\t\t\tid\n\t\t\tmidiinstrument (MidiInstrument)\n\t\t\t\tchannel\n\t\t\t\tprogram\n\t\t\t\tvolume\n\t\t\t\tpan\n\t\t\t\tid\n\tpart (Part)\n\t\tid\n\t\tmeasures (Vector{Measure})\n\t\t\tattributes (Attributes)\n\t\t\t\tdivisions\n\t\t\t\tkey (Key)\n\t\t\t\t\tfifth\n\t\t\t\t\tmode\n\t\t\t\ttime (Time)\n\t\t\t\t\tbeats\n\t\t\t\t\tbeattype\n\t\t\t\tstaves\n\t\t\t\tinstruments\n\t\t\t\tclef (Clef)\n\t\t\t\t\tsign\n\t\t\t\t\tline\n\t\t\t\ttranspose (Transpose)\n\t\t\t\t\tdiatonic\n\t\t\t\t\tchromatic\n\t\t\t\t\toctaveChange\n\t\t\t\t\tdouble\n\t\t\tnotes (Vector{NoteX})\n\t\t\t\tpitch (Pitch)\n\t\t\t\t\tstep\n\t\t\t\t\talter\n\t\t\t\t\toctave\n\t\t\t\trest (Rest)\n\t\t\t\tunpitched (Unpitched)\n\t\t\t\tduration\n\t\t\t\ttype\n\t\t\t\taccidental","category":"page"},{"location":"types.html#","page":"Types","title":"Types","text":"For fieldnames, if it is a Vector it has s at the end of the word.","category":"page"},{"location":"types.html#","page":"Types","title":"Types","text":"For types, names are capitalized for each word (Camel convention):","category":"page"},{"location":"types.html#","page":"Types","title":"Types","text":"ScorePartwise, Part, Measure, NoteX, Unpitched, Rest, Pitch, Attributes, Time, Transpose, Clef, Key, PartList, ScorePart, MidiInstrument, MidiDevice, ScoreInstrument","category":"page"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [MusicXML]\nPages   = [\"types.md\"]","category":"page"},{"location":"types.html#","page":"Types","title":"Types","text":"Modules = [MusicXML]\nPages   = [\"MusicXML.jl\", \"types.jl\"]","category":"page"},{"location":"utilities.html#Utilities-1","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities.html#","page":"Utilities","title":"Utilities","text":"pitch2xml, xml2pitch","category":"page"},{"location":"utilities.html#","page":"Utilities","title":"Utilities","text":"Modules = [MusicXML]\nPages   = [\"utilities.md\"]","category":"page"},{"location":"utilities.html#","page":"Utilities","title":"Utilities","text":"Modules = [MusicXML]\nPages   = [\"utilities.jl\"]","category":"page"},{"location":"utilities.html#MusicXML.pitch2xml-Tuple{Any}","page":"Utilities","title":"MusicXML.pitch2xml","text":"pitch2xml(pitch)\n\nReturn the musicxmls values of the given pitch\n\nModified from MIDI.jl\n\nExamples:\n\npitch = xml2pitch(step, alter, octave)\n\n\n\n\n\n","category":"method"},{"location":"utilities.html#MusicXML.xml2pitch-Tuple{Any,Any,Any}","page":"Utilities","title":"MusicXML.xml2pitch","text":"xml2pitch(step, alter, octave) -> Int\n\nReturn the pitch value of the given note\n\nModified from MIDI.jl\n\nExamples:\n\nstep, alter, octave = pitch2xml(pitch)\n\n\n\n\n\n","category":"method"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = MusicXML","category":"page"},{"location":"index.html#MusicXML-1","page":"Home","title":"MusicXML","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Powerful MusicXML reading and writing package for Julia.","category":"page"},{"location":"index.html#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"] add https://github.com/JuliaMusic/MusicXML.jl","category":"page"},{"location":"index.html#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"See Example from sidebar for an example of MusicXML usage. Study Types and IO for more information.","category":"page"},{"location":"io.html#I/O-functions-1","page":"IO","title":"I/O functions","text":"","category":"section"},{"location":"io.html#","page":"IO","title":"IO","text":"readmusicxml, parsemusicxml","category":"page"},{"location":"io.html#","page":"IO","title":"IO","text":"Modules = [MusicXML]\nPages   = [\"io.md\"]","category":"page"},{"location":"io.html#","page":"IO","title":"IO","text":"Modules = [MusicXML]\nPages   = [\"io.jl\"]","category":"page"},{"location":"io.html#MusicXML.parsemusicxml-Tuple{String}","page":"IO","title":"MusicXML.parsemusicxml","text":"parsemusicxml(s)\n\nParses musicxml from a string and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = parsemusicxml(s)\n\n\n\n\n\n","category":"method"},{"location":"io.html#MusicXML.readmusicxml-Tuple{String}","page":"IO","title":"MusicXML.readmusicxml","text":"readmusicxml(filepath)\n\nReads musicxml file and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = readmusicxml(joinpath(\"examples\", \"musescore.musicxml\"))\n\n\n\n\n\n","category":"method"},{"location":"io.html#MusicXML.extractdata-Tuple{EzXML.Document}","page":"IO","title":"MusicXML.extractdata","text":"extractdata(doc)\n\nExtracts musicxml data, builds all the types and stores them in proper format.\n\nThis function is not exported. Use readmusicxml and parsemusicxml instead.\n\nExamples\n\ndata = extractdata(doc)\n\n\n\n\n\n","category":"method"},{"location":"parsing.html#Usage-Example-1","page":"Example","title":"Usage Example","text":"","category":"section"},{"location":"parsing.html#","page":"Example","title":"Example","text":"using MusicXML\n\n# Reads musicxml file and then extracts the data, builds all the types and stores them in proper format.\nscorepartwise = readmusicxml( \"musescore.musicxml\")\n\n# Example 1:\n# Prints Each instrument name and then the pitches\n\n# Extracting each instrument information\nscprts = scorepartwise.partlist.scoreparts\n\n# Extracting parts\nprts = scorepartwise.parts\n\n# Extracting each part\nfor prt in prts\n\n    ind = findfirst(x -> prt.id == x.id, scprts) # returns the index of scorepart that matches the id of part\n\n    # printing the instrument name\n    println(scprts[ind].name)\n\n    # Extracting each measure of the part\n    iMsr=1\n    for msr in prt.measures\n        # Extracting notes of each measure\n        for nt in msr.notes\n            if !isnothing(nt.pitch)\n\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.pitch)     # print pitch of the note\n                println(nt.duration)  # print duration of the note\n            elseif !isnothing(nt.unpitched)\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.unpitched) # print unpitched of the note\n                println(nt.duration)  # print duration of the note\n            end\n\n        end\n\n        iMsr+=1\n    end\nend","category":"page"}]
}
