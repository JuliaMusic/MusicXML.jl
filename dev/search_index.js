var documenterSearchIndex = {"docs":
[{"location":"types/#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"Since MusicXML's types are not exported from the package to avoid conflicts with the similarly named types from other libraries (such as Dates.Time, MIDI.Note). There are 3 different solutions:","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"import the types yourself if you are sure that there is no conflict. Use @importMX to import all the types.\nor use MX. before the type names (which MX is an alias for MusicXML)\nor use @MX macro, which adds MX. automatically to the type names. See @MX docstring for examples.","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"ScorePartwise\n\tpartlist (PartList)\n\t\tscoreparts (Vector{ScorePart})\n\t\t\tname\n\t\t\tid\n\t\t\tscoreinstrument (ScoreInstrument)\n\t\t\t\tname\n\t\t\t\tid\n\t\t\tmididevice (MidiDevice)\n\t\t\t\tport\n\t\t\t\tid\n\t\t\tmidiinstrument (MidiInstrument)\n\t\t\t\tchannel\n\t\t\t\tprogram\n\t\t\t\tvolume\n\t\t\t\tpan\n\t\t\t\tid\n\tpart (Part)\n\t\tid\n\t\tmeasures (Vector{Measure})\n\t\t\tattributes (Attributes)\n\t\t\t\tdivisions\n\t\t\t\tkey (Key)\n\t\t\t\t\tfifth\n\t\t\t\t\tmode\n\t\t\t\ttime (Time)\n\t\t\t\t\tbeats\n\t\t\t\t\tbeattype\n\t\t\t\tstaves\n\t\t\t\tinstruments\n\t\t\t\tclefs (Vector{Clef})\n\t\t\t\t\tsign\n\t\t\t\t\tline\n\t\t\t\ttranspose (Transpose)\n\t\t\t\t\tdiatonic\n\t\t\t\t\tchromatic\n\t\t\t\t\toctaveChange\n\t\t\t\t\tdouble\n\t\t\tnotes (Vector{Note})\n\t\t\t\tgrace (Grace)\n\t\t\t\tpitch (Pitch)\n\t\t\t\t\tstep\n\t\t\t\t\talter\n\t\t\t\t\toctave\n\t\t\t\trest (Rest)\n\t\t\t\tunpitched (Unpitched)\n\t\t\t\tduration\n\t\t\t\ttype\n\t\t\t\taccidental\n\t\t\t\tchord (Chord)","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"For fieldnames, if it is a Vector it has s at the end of the word.","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"For types, names are capitalized for each word (Camel convention):","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"ScorePartwise, Part, Measure, Note, Chord, Unpitched, Rest, Pitch, Grace, Attributes, Time, Transpose, Clef, Key, PartList, ScorePart, MidiInstrument, MidiDevice, ScoreInstrument","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"Modules = [MusicXML]\nPages   = [\"types.md\"]","category":"page"},{"location":"types/#","page":"Types","title":"Types","text":"Modules = [MusicXML]\nPages   = [\"types.jl\"]","category":"page"},{"location":"creating/#Creating-1","page":"Creating Example","title":"Creating","text":"","category":"section"},{"location":"creating/#","page":"Creating Example","title":"Creating Example","text":"using MusicXML\n@importMX # imports all the MusicXML types since we know there is no conflict\n\n## Part List\n### Piano\nmidiinstrument_piano = MidiInstrument(channel= 1, program =1, volume = 100, pan =0, id = \"P1-I1\")\nscorepart_piano = ScorePart(name = \"Piano\", midiinstrument = midiinstrument_piano, id = \"P1\")\n\n### Acoustic Guitar\nmidiinstrument_guitar = MidiInstrument(channel= 1, program =26, volume = 100, pan =0, id = \"P2-I1\")\nscorepart_guitar = ScorePart(name = \"Acoustic Guitar\", midiinstrument = midiinstrument_guitar, id = \"P2\")\n\n###\npartlist = PartList(scoreparts = [scorepart_piano, scorepart_guitar])\n\n## Part\n### Piano\n\nattributes1_piano = Attributes(\n   time = Time(beats = 4, beattype = 4), # 4/4\n   divisions = 4, # we want to use 16th notes at minimum\n   clef = [Clef(number = 1, sign = \"G\", line = 2), Clef(number = 2, sign = \"F\", line = 4)], # Piano clefs\n   staves = 2, # Piano staves\n   key = Key(fifths = 0, mode = \"major\"), # no accidentals, major key\n)\n\nmeasure1_notes_piano = [\nNote(pitch = Pitch(step = \"C\", alter = 0, octave = 4), duration =  4),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 4), duration =  4),\nNote(pitch = Pitch(step = \"E\", alter = 0, octave = 4), duration =  4),\nNote(pitch = Pitch(step = \"F\", alter = +1, octave = 4), duration =  4),\n]\n\nmeasure2_notes_piano = [\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 5), duration =  1),\nNote(pitch = Pitch(step = \"G\", alter = +1, octave = 5), duration =  1),\nNote(pitch = Pitch(step = \"B\", alter = 0, octave = 5), duration =  1),\nNote(pitch = Pitch(step = \"A\", alter = +1, octave = 5), duration =  1),\nNote(rest = Rest(), duration =  4), # Rest\nNote(pitch = Pitch(step = \"A\", alter = 0, octave = 5), duration =  4),\nNote(pitch = Pitch(step = \"B\", alter = 0, octave = 5), duration =  4),\n]\n\nmeasures_piano = [\nMeasure(attributes = attributes1_piano, notes = measure1_notes_piano) # measure 1 has attributes\nMeasure(notes = measure2_notes_piano)\n]\n\n\npart_piano = Part(measures = measures_piano, id = \"P1\")\n\n\n### Guitar\n\nattributes1_guitar = Attributes(\n   time = Time(beats = 4, beattype = 4), # 4/4\n   divisions = 4, # we want to use 16th notes at minimum\n   clef = [Clef(number = 1, sign = \"G\", line = 2), Clef(number = 2, sign = \"TAB\", line = 6)], # Guitar Clefs\n   staves = 2, # Guitar staves\n   key = Key(fifths = 0, mode = \"major\"), # no accidentals, major key\n)\n\nmeasure1_notes_guitar = [\n# G Major chord for a bar\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 2), duration =  16),\nNote(pitch = Pitch(step = \"B\", alter = 0, octave = 2), duration =  16, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 3), duration =  16, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 3), duration =  16, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 4), duration =  16, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 4), duration =  16, chord = Chord()),\n]\n\nmeasure2_notes_guitar = [\n# G Major chord for half a bar\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 2), duration =  8),\nNote(pitch = Pitch(step = \"B\", alter = 0, octave = 2), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 3), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 3), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 4), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 4), duration =  8, chord = Chord()),\n\n# G Major chord for half a bar\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 2), duration =  8),\nNote(pitch = Pitch(step = \"B\", alter = 0, octave = 2), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 3), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 3), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"D\", alter = 0, octave = 4), duration =  8, chord = Chord()),\nNote(pitch = Pitch(step = \"G\", alter = 0, octave = 4), duration =  8, chord = Chord()),\n]\n\nmeasures_guitar = [\nMeasure(attributes = attributes1_guitar, notes = measure1_notes_guitar) # measure 1 has attributes\nMeasure(notes = measure2_notes_guitar)\n]\n\n\npart_guitar = Part(measures = measures_guitar, id = \"P2\")\n\n##\nscore = ScorePartwise(\npartlist = partlist,\nparts =  [part_piano, part_guitar],\n)\n\nwritemusicxml(\"myscore.musicxml\", score)","category":"page"},{"location":"utilities/#Utilities-1","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/#","page":"Utilities","title":"Utilities","text":"pitch2xml, xml2pitch","category":"page"},{"location":"utilities/#","page":"Utilities","title":"Utilities","text":"Modules = [MusicXML]\nPages   = [\"utilities.md\"]","category":"page"},{"location":"utilities/#","page":"Utilities","title":"Utilities","text":"Modules = [MusicXML]\nPages   = [\"utilities.jl\"]","category":"page"},{"location":"utilities/#MusicXML.pitch2xml-Tuple{UInt8}","page":"Utilities","title":"MusicXML.pitch2xml","text":"pitch2xml(pitch)\n\nReturn the musicxmls values of the given pitch (MIDI)\n\npitch::UInt8 : starting from C-1 = 0, adding one per semitone.\n\n(Image: Step Alter Octave on Staff) (Image: Pitch on Guitar) (Image: Pitch on Full Keyboard)\n\nModified from MIDI.jl\n\nExamples:\n\npitch = 0 # for C-1\nstep, alter, octave = pitch2xml()\n\n\n\n\n\n","category":"method"},{"location":"utilities/#MusicXML.xml2pitch-Tuple{Any,Any,Any}","page":"Utilities","title":"MusicXML.xml2pitch","text":"xml2pitch(step, alter, octave) -> Int\n\nReturn the pitch value of the given note\n\nSee Pitch\n\nModified from MIDI.jl\n\nExamples:\n\npitch = xml2pitch(step, alter, octave)\n\n\n\n\n\n","category":"method"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = MusicXML","category":"page"},{"location":"#MusicXML-1","page":"Home","title":"MusicXML","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Powerful MusicXML reading and writing package for Julia.","category":"page"},{"location":"#Installation-and-Usage-1","page":"Home","title":"Installation and Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"MusicXML\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using MusicXML","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Look into Parsing Example and Creating Example for examples of MusicXML's usage. Study Types and IO for more information.","category":"page"},{"location":"io/#I/O-functions-1","page":"IO","title":"I/O functions","text":"","category":"section"},{"location":"io/#","page":"IO","title":"IO","text":"readmusicxml, parsemusicxml, writemusicxml, printmusicxml, pprint, fwritemusicxml, readmusicxml_partial, parsemusicxml_partial","category":"page"},{"location":"io/#","page":"IO","title":"IO","text":"Modules = [MusicXML]\nPages   = [\"io.md\"]","category":"page"},{"location":"io/#","page":"IO","title":"IO","text":"Modules = [MusicXML]\nPages   = [\"io.jl\"]","category":"page"},{"location":"io/#MusicXML.fwritemusicxml-Tuple{Any,Any}","page":"IO","title":"MusicXML.fwritemusicxml","text":"fwritemusicxml(filename::AbstractString, x)\n\nFast write\n\n\n\n\n\n","category":"method"},{"location":"io/#MusicXML.parsemusicxml-Tuple{String}","page":"IO","title":"MusicXML.parsemusicxml","text":"parsemusicxml(s)\n\nParses musicxml from a string and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = parsemusicxml(s)\n\n\n\n\n\n","category":"method"},{"location":"io/#MusicXML.printmusicxml","page":"IO","title":"MusicXML.printmusicxml","text":"printmusicxml(x)\nprintmusicxml(io, x)\n\nPrint musicxml score\n\nExamples\n\nprintmusicxml(score)\n\n\n\n\n\n","category":"function"},{"location":"io/#MusicXML.readmusicxml-Tuple{String}","page":"IO","title":"MusicXML.readmusicxml","text":"readmusicxml(filepath)\n\nReads musicxml file and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = readmusicxml(joinpath(\"examples\", \"musescore.musicxml\"))\n\n\n\n\n\n","category":"method"},{"location":"io/#MusicXML.writemusicxml","page":"IO","title":"MusicXML.writemusicxml","text":"writemusicxml(filename::AbstractString, x)\n\nWrites musicxml score into a file.\n\nExamples\n\nwritemusicxml(\"myscore.musicxml\", score)\n\n\n\n\n\n","category":"function"},{"location":"io/#MusicXML.extractdata-Tuple{EzXML.Document}","page":"IO","title":"MusicXML.extractdata","text":"extractdata(doc)\n\nExtracts musicxml data, builds all the types and stores them in proper format.\n\nThis function is not exported. Use readmusicxml and parsemusicxml instead.\n\nExamples\n\ndata = extractdata(doc)\n\n\n\n\n\n","category":"method"},{"location":"parsing/#Usage-Example-1","page":"Parsing Example","title":"Usage Example","text":"","category":"section"},{"location":"parsing/#","page":"Parsing Example","title":"Parsing Example","text":"using MusicXML\n\n# Reads musicxml file and then extracts the data, builds all the types and stores them in proper format.\nscorepartwise = readmusicxml( \"musescore.musicxml\")\n\n# Example 1:\n# Prints Each instrument name and then the pitches\n\n# Extracting each instrument information\nscprts = scorepartwise.partlist.scoreparts\n\n# Extracting parts\nprts = scorepartwise.parts\n\n# Extracting each part\nfor prt in prts\n\n    ind = findfirst(x -> prt.id == x.id, scprts) # returns the index of scorepart that matches the id of part\n\n    # printing the instrument name\n    println(scprts[ind].name)\n\n    # Extracting each measure of the part\n    iMsr=1\n    for msr in prt.measures\n        # Extracting notes of each measure\n        for nt in msr.notes\n            if !isnothing(nt.pitch)\n\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.pitch)     # print pitch of the note\n                println(nt.duration)  # print duration of the note\n            elseif !isnothing(nt.unpitched)\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.unpitched) # print unpitched of the note\n                println(nt.duration)  # print duration of the note\n            end\n\n        end\n\n        iMsr+=1\n    end\nend","category":"page"}]
}
