var documenterSearchIndex = {"docs":
[{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = MusicXML","category":"page"},{"location":"index.html#MusicXML-1","page":"Home","title":"MusicXML","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"Powerful MusicXML reading and writing package for Julia.","category":"page"},{"location":"index.html#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"] add https://github.com/JuliaMusic/MusicXML.jl","category":"page"},{"location":"index.html#Usage-Example-1","page":"Home","title":"Usage Example","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"using MusicXML\n\n# Reads musicxml file and then extracts the data, builds all the types and stores them in proper format.\nscorepartwise = readmusicxml( \"musescore.musicxml\")\n\n# Example 1:\n# Prints Each instrument name and then the pitches\n\n# Extracting each instrument information\nscprts = scorepartwise.partlist.scoreparts\n\n# Extracting parts\nprts = scorepartwise.parts\n\n# Extracting each part\nfor prt in prts\n\n    ind = findfirst(x -> prt.id == x.id, scprts) # returns the index of scorepart that matches the id of part\n\n    # printing the instrument name\n    println(scprts[ind].name)\n\n    # Extracting each measure of the part\n    iMsr=1\n    for msr in prt.measures\n        # Extracting notes of each measure\n        for nt in msr.notes\n            if !isnothing(nt.pitch)\n\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.pitch)     # print pitch of the note\n                println(nt.duration)  # print duration of the note\n            elseif !isnothing(nt.unpitched)\n                println(\"Measure no. $iMsr\")    # print measure number\n                println(nt.unpitched) # print unpitched of the note\n                println(nt.duration)  # print duration of the note\n            end\n\n        end\n\n        iMsr+=1\n    end\nend","category":"page"},{"location":"index.html#Types-and-Functions-1","page":"Home","title":"Types and Functions","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"You can use among these exported types and functions:","category":"page"},{"location":"index.html#I/O-functions-1","page":"Home","title":"I/O functions","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"readmusicxml, parsemusicxml","category":"page"},{"location":"index.html#Types:-1","page":"Home","title":"Types:","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"scorepartwise\n\tpartlist\n\t\tscoreparts\n\t\t\tname\n\t\t\tid\n\t\t\tScoreInstrument\n\t\t\t\tname\n\t\t\t\tid\n\t\t\tMidiDevice\n\t\t\t\tport\n\t\t\t\tid\n\t\t\tMidiInstrument\n\t\t\t\tchannel\n\t\t\t\tprogram\n\t\t\t\tvolume\n\t\t\t\tpan\n\t\t\t\tid\n\tparts\n\t\tid\n\t\tmeasures\n\t\t\tattributes\n\t\t\t\tdivisions\n\t\t\t\tkey\n\t\t\t\t\tfifth\n\t\t\t\t\tmode\n\t\t\t\ttime\n\t\t\t\t\tbeats\n\t\t\t\t\tbeattype\n\t\t\t\tstaves\n\t\t\t\tinstruments\n\t\t\t\tclef\n\t\t\t\t\tsign\n\t\t\t\t\tline\n\t\t\t\ttranspose\n\t\t\t\t\tdiatonic\n\t\t\t\t\tchromatic\n\t\t\t\t\toctaveChange\n\t\t\t\t\tdouble\n\t\t\tnotes\n\t\t\t\tpitch\n\t\t\t\t\tstep\n\t\t\t\t\talter\n\t\t\t\t\toctave\n\t\t\t\trest\n\t\t\t\tunpitched\n\t\t\t\tduration\n\t\t\t\ttype\n\t\t\t\taccidental","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"For naming, If the fieldname is a Vector it has s at the end of the word.","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"For naming, types are first letter captalized of the field names:","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"ScorePartwise, Part, Measure, NoteX, Unpitched, Rest, Pitch, Attributes, Time, Transpose, Clef, Key, PartList, ScorePart, MidiInstrument, MidiDevice, ScoreInstrument","category":"page"},{"location":"index.html#Utilities-1","page":"Home","title":"Utilities","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"pitch2xml, xml2pitch","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Modules = [MusicXML]","category":"page"},{"location":"index.html#MusicXML.Attributes","page":"Home","title":"MusicXML.Attributes","text":"Attributes\n\nArguments\n\n- divisions::Int16, \"~\"\n- key::Key, \"~\"\n- time::Time, \"~\"\n- staves::UN{UInt16} = nothing, \"~\"\n- instruments::UN{UInt16} = nothing, \"~\"\n- clef::UN{Clef} = nothing, \"~\"\n- transpose::UN{Transpose} = nothing, \"~\"\n\nA type to hold the data for the attributes of a musicxml measure\n\nThe attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving. When attributes are changed mid-measure, it affects the music in score order, not in MusicXML document order.\n\nkey: See Key doc\n\ndivisions: Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.\n\ntime: See Time doc\n\nstaves: The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.\n\ninstruments: The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.\n\nclef: See Clef doc\n\nMore info\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Clef","page":"Home","title":"MusicXML.Clef","text":"Clef\n\nArguments\n\n- sign::String, \"sign\"\n- line::Int16, \"line\"\n- octave::UN{Int64} = nothing, \"clef-octave-change\"\n\nA type to hold clef information for a measure in musicxml file.\n\nClefs are represented by a combination of sign, line, and clef-octave-change elements. Clefs appear at the start of each system unless the print-object attribute has been set to \"no\" or the additional attribute has been set to \"yes\".\n\nsign: The sign element represents the clef symbol: G, F, C, percussion, TAB, jianpu, none. More info\n\nline: Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).\n\noctave: The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.\n\nMore info\n\nExample\n\nClef(sign = \"TAB\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Key","page":"Home","title":"MusicXML.Key","text":"Key\n\nArguments\n\n- # cancel\n- fifths::Int8, \"~\"\n- mode::UN{String} = nothing, \"~\", modeCheck\n- # key-octave\n\nA type to hold key information for a measure in musicxml file.\n\nThe key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.\n\nfifth: number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths\n\nmode:  major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, none\n\nMore info\n\nExample\n\nKey(fifths = 0, mode = \"major\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Measure","page":"Home","title":"MusicXML.Measure","text":"Measure\n\nArguments\n\n- attributes::UN{Attributes} = nothing, \"~\"\n- notes::Vector{NoteX}, \"note\"\n\nA type to hold the data for a musicxml measure\n\nattributes: See Attributes doc notes: See NoteX doc\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Mididevice","page":"Home","title":"MusicXML.Mididevice","text":"Mididevice\n\nArguments\n\n- port::Int16, att\"port\"\n- id::String, att\"id\"\n\nThe midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part starting in MusicXML 3.0.\n\nMore info\n\nExample\n\nMididevice(port = 1, id = \"P1-I1\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Midiinstrument","page":"Home","title":"MusicXML.Midiinstrument","text":"Midiinstrument\n\nArguments\n\n- channel::Int64 = 0, \"midi-channel\",  midi16\n- name::UN{String} = nothing, \"midi-name\"\n- bank::UN{Int64} = nothing, \"midi-bank\", midi16384\n- program::Int64 = 1, \"midi-program\", midi128\n- unpitched::UN{Int64} = nothing, \"midi-unpitched\", midi16\n- volume::Float64 = 127, \"volume\", percent\n- pan::Float64 = 0, \"pan\", rot180\n- elevation::UN{Float64} = nothing, \"elevation\", rot180\n- id::String = \"P1-I1\", att\"id\"\n\nMidiinstrument type holds information about the sound of a midi instrument.\n\nMore info\n\nPan: -90 is hard left, 0 is center, -180 is behind\n\nExample\n\nMidiinstrument(channel= 1, program =1, volume = 127, pan =0, id = \"P1-I1\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.NoteX","page":"Home","title":"MusicXML.NoteX","text":"NoteX\n\nArguments\n\n- pitch::UN{Pitch} = nothing, \"~\"\n- rest::UN{Rest} = nothing, \"~\"\n- unpitched::UN{Unpitched} = nothing, \"~\"\n- duration::UInt, \"~\"\n- # voice\n- type::UN{String} = nothing, \"~\"\n- accidental::UN{String} = nothing, \"~\"\n- tie::UN{String} = nothing, \"~\" # start, stop, nothing TODO\n\nNotes are the most common type of MusicXML data. The MusicXML format keeps the MuseData distinction between elements used for sound information and elements used for notation information (e.g., tie is used for sound, tied for notation). Thus grace notes do not have a duration element. Cue notes have a duration element, as do forward elements, but no tie elements. Having these two types of information available can make interchange considerably easier, as some programs handle one type of information much more readily than the other.\n\npitch: See Pitch doc\n\nduration : See MIDI.Note doc\n\ntype: Type indicates the graphic note type, Valid values (from shortest to longest) are 1024th, 512th, 256th, 128th, 64th, 32nd, 16th, eighth, quarter, half, whole, breve, long, and maxima. The size attribute indicates full, cue, or large size, with full the default for regular notes and cue the default for cue and grace notes.\n\naccidental: The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are \"no\" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group. Empty accidental objects are not allowed. If no accidental is desired, it should be omitted. sharp, flat, natural, double sharp, double flat, parenthesized accidental\n\ntie:\n\nMore info\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Part","page":"Home","title":"MusicXML.Part","text":"Part\n\nArguments\n\n- measures::Vector{Measure}, \"measure\"\n- id::String, att\"~\"\n\nA type to hold the data for a part in musicxml file.\n\nmeasures: See Measure doc\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Partlist","page":"Home","title":"MusicXML.Partlist","text":"Partlist\n\nArguments\n\n- # TODO partgroup\n- scoreparts::Vector{Scorepart}, \"score-part\"\n\nHolds scoreparts and partgroup.\n\nSee Scorepart doc\n\nMore info\n\nExample\n\nPartlist([     Scorepart(name = \"Piano 1\", midiinstrument = Midiinstrument(), id = \"P1\"),     Scorepart(name = \"Piano 2\", midiinstrument = Midiinstrument(), id = \"P2\"), ])\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Pitch","page":"Home","title":"MusicXML.Pitch","text":"Pitch\n\nArguments\n\n- step::String, \"~\"\n- alter::UN{Float16} = nothing, \"~\"\n- octave::Int8, \"~\"\n\nHolds musicxml pitch data. MusicXML pitch data is represented as a combination of the step of the diatonic scale, the chromatic alteration, and the octave.\n\nUse step, alter, octave = pitch2xml(pitch) and  pitch = xml2pitch(step, alter, octave) for conversions between midi pitch and musicxml pitch\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Rest","page":"Home","title":"MusicXML.Rest","text":"Rest\n\nArguments\n\nmeasure::UN{YN} = nothing, att\"~\"\ndispStep::UN{String} = nothing, \"display-step\"\ndispOctave::UN{Int8} = nothing, \"display-octave\"\n\nThe rest element indicates notated rests or silences. Rest elements are usually empty, but placement on the staff can be specified using display-step and display-octave elements. If the measure attribute is set to yes, this indicates this is a complete measure rest.\n\nThe display-step-octave group contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2. If not present, the note is placed on the middle line of the staff, generally used for a one-line staff.\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Scoreinstrument","page":"Home","title":"MusicXML.Scoreinstrument","text":"Scoreinstrument\n\nArguments\n\n- name::String, \"instrument-name\"\n- abbreviation::UN{String} = nothing, \"instrument-abbreviation\"\n- sound::UN{String} = nothing, \"instrument-sound\"\n- # ensemble::UN{Int64} = nothing, empty\"~\", positive\n- # solo::UN{Int64} = nothing, empty\"~\"\n- id::String, att\"id\"\n- # VST::VST, \"virtual-instrument\"\n\nThe score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required id attribute, a name, and an optional abbreviation. A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names.\n\nMore info\n\nExample\n\nScoreinstrument(name = \"Violin\", id = \"P1-I1\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Scorepart","page":"Home","title":"MusicXML.Scorepart","text":"Scorepart\n\nArguments\n\n- # identification\n- name::String, \"part-name\"\n- nameDisplay::UN{String} = nothing, \"part-name-display\"\n- abbreviation::UN{String} = nothing, \"part-abbreviation\"\n- abbreviationDisplay::UN{String} = nothing, \"part-abbreviation-display\"\n- scoreinstrument::UN{Scoreinstrument} = nothing, \"score-instrument\"\n- mididevice::UN{Mididevice} = nothing, \"midi-device\"\n- midiinstrument::Midiinstrument, \"midi-instrument\"\n- id::String, att\"id\"\n\nHolds information about one Scorepart in a score\n\nEach MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well.\n\nscoreinstrument: See Scoreinstrument doc mididevice: See Mididevice doc midiinstrument: See Midiinstrument doc\n\nMore info\n\nExamples\n\nScorepart(name = \"Piano\",midiinstrument = Midiinstrument(), id = \"P1\")\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Scorepartwise","page":"Home","title":"MusicXML.Scorepartwise","text":"Scorepartwise\n\nArguments\n\n- # TODO identification\n- # TODO defaults\n- partlist::Partlist, \"part-list\"\n- parts::Vector{Part}, \"part\"\n\nA type to hold the data for a musicxml file.\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Time","page":"Home","title":"MusicXML.Time","text":"Time\n\nArguments\n\n- beats::Int8 = 4, \"~\"\n- beatType::Int8 = 4, \"beat-type\"\n- # interchangeable\n\nTime signatures are represented by the beats element for the numerator and the beat-type element for the denominator.\n\nMore info\n\nTime(beats=6, beattype = 8)\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Transpose","page":"Home","title":"MusicXML.Transpose","text":"Transpose\n\nArguments\n\n- diatonic::Int8 = 0, \"~\"\n- chromatic::Int8 = 0, \"~\"\n- octaveChange::UN{Int8} = nothing, \"octave-change\"\n- double::UN{Bool} = nothing, \"~\"\n\nA type to hold transpose information for a measure in musicxml file.\n\nIf the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.\n\ndiatonic: The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.\n\nchromatic: The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitc\n\noctaveChange: The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.\n\ndouble: If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).\n\nMore info\n\nExample\n\nTranspose() # default values\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.Unpitched","page":"Home","title":"MusicXML.Unpitched","text":"Unpitched\n\nArguments\n\nmeasure::UN{YN} = nothing, att\"~\"\ndispStep::UN{String} = nothing, \"display-step\"\ndispOctave::UN{Int8} = nothing, \"display-octave\"\n\nThe unpitched type represents musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice.\n\n\n\n\n\n","category":"type"},{"location":"index.html#MusicXML.parsemusicxml-Tuple{String}","page":"Home","title":"MusicXML.parsemusicxml","text":"parsemusicxml(s)\n\nParses musicxml from a string and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = parsemusicxml(s)\n\n\n\n\n\n","category":"method"},{"location":"index.html#MusicXML.pitch2xml-Tuple{Any}","page":"Home","title":"MusicXML.pitch2xml","text":"pitch2xml(pitch)\n\nReturn the musicxmls values of the given pitch\n\nModified from MIDI.jl\n\nExamples:\n\npitch = xml2pitch(step, alter, octave)\n\n\n\n\n\n","category":"method"},{"location":"index.html#MusicXML.readmusicxml-Tuple{String}","page":"Home","title":"MusicXML.readmusicxml","text":"readmusicxml(filepath)\n\nReads musicxml file and then extracts the data, builds all the types and stores them in proper format.\n\nExamples\n\ndata = readmusicxml(joinpath(\"examples\", \"musescore.musicxml\"))\n\n\n\n\n\n","category":"method"},{"location":"index.html#MusicXML.xml2pitch-Tuple{Any,Any,Any}","page":"Home","title":"MusicXML.xml2pitch","text":"xml2pitch(step, alter, octave) -> Int\n\nReturn the pitch value of the given note\n\nModified from MIDI.jl\n\nExamples:\n\nstep, alter, octave = pitch2xml(pitch)\n\n\n\n\n\n","category":"method"},{"location":"index.html#MusicXML.extractdata-Tuple{EzXML.Document}","page":"Home","title":"MusicXML.extractdata","text":"extractdata(doc)\n\nExtracts musicxml data, builds all the types and stores them in proper format.\n\nThis function is not exported. Use readmusicxml and parsemusicxml instead.\n\nExamples\n\ndata = extractdata(doc)\n\n\n\n\n\n","category":"method"}]
}
