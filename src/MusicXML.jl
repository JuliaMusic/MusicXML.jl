module MusicXML

using EzXML, MIDI, MusicManipulations
import Base.@kwdef
import EzXML.Node

export readmusicxml, parsemusicxml

################################################################
"""
    Scoreinstrument

The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation. A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names.
"""
mutable struct Scoreinstrument
    name::String
    ID::String
    xml::Node
end
# xml constructor
function Scoreinstrument(name,ID)
    xml = ElementNode("score-instrument")
    addelement!(xml, "instrument-name", string(name))
    xml["id"] = ID * "-I1"
    return Scoreinstrument(name, ID, xml)
end
################################################################
"""
    Mididevice

The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part starting in MusicXML 3.0.
"""
mutable struct Mididevice
    port::Int16
    ID::String
    xml::Node
end
# xml constructor
function Mididevice(port,ID)
    xml = ElementNode("midi-device")
    xml["port"] = string(port)
    xml["id"] = ID * "-I1"
    return Mididevice(port, ID, xml)
end
################################################################
"""
    Midiinstrument
    Midiinstrument(channel, program, volume, pan)
    Midiinstrument()

Midiinstrument type holds information about the sound of a midi instrument.

# http://www.music-software-development.com/midi-tutorial.html - Part 4
# Status byte : 1100 CCCC
# Data byte 1 : 0XXX XXXX

# Examples
```julia
Midiinstrument(0,1,127,0)
```
"""
mutable struct Midiinstrument
    channel::UInt8 # 0 to 15
    program::UInt8
    volume::UInt8
    pan::Int8
    ID::String
    xml::Node # autogenerated
end

# default constructor
Midiinstrument() = Midiinstrument(0, 1, 127, 0, "P1")
Midiinstrument(channel, program, volume, pan) = Midiinstrument(channel, program, volume, pan, "P1")

# xml constructor
function Midiinstrument(channel, program, volume, pan, ID)
    xml = ElementNode("midi-instrument")
    addelement!(xml, "midi-channel", string(channel))
    addelement!(xml, "midi-program", string(program))
    addelement!(xml, "volume", string(volume))
    addelement!(xml, "pan", string(pan))
    xml["id"] = ID * "-I1"
    return Midiinstrument(channel, program, volume, pan, ID, xml)
end

################################################################
"""
    Scorepart
    Scorepart(ID, name, midiinstrument)
    Scorepart()

Holds information about one Scorepart in a score

Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well.

[More info](https://usermanuals.musicxml.com/MusicXML/Content/CT-MusicXML-score-part.htm)

# Examples
```julia
Scorepart(name = "Violin",midiinstrument = midiinstrument(0,1,127,0), ID = "P1")
```
"""
@kwdef mutable struct Scorepart
    name::String
    scoreinstrument::Union{Nothing,ScoreInstrument} = nothing
    mididevice::Union{Nothing,Mididevice} = nothing
    midiinstrument::Midiinstrument
    ID::String
    xml::Node # autogenerated
end

# default constructor
Scorepart() = Scorepart(name = "Piano", midiinstrument = midiinstrument(), ID = "P1")

# xml constructor
function Scorepart(; name, scoreinstrument, mididevice, midiinstrument, ID)
    xml = ElementNode("score-part")
    addelement!(xml, "part-name", string(name))
    scoreinstrument == nothing ?  : addelement!(xml, "score-instrument", scoreinstrument)
    mididevice == nothing ?  : addelement!(xml, "midi-device", mididevice)
    addelement!(xml, "midi-instrument", string(midiinstrument))
    xml["id"] = string(ID)
    return Scorepart(name = name, scoreinstrument = scoreinstrument, mididevice = mididevice, midiinstrument = midiinstrument, ID = ID, xml = xml)
end
################################################################
################################################################
################################################################
"""
    extractdata(doc)

Helper internal function which extract musicxml data. This function is not exported. Use readmusicxml and parsemusicxml instead.

# Examples
```julia
data = extractdata(doc)
```
"""
function extractdata(doc::EzXML.Document)

    # Get the root element from `doc`.
    scorepartwise = root(doc)

    if scorepartwise.name != "score-partwise"
        error("Only score-partwise musicxml files are supported")
    end

    # Score Partwise
    for scorepartwiseC in eachelement(scorepartwise)

        # Part List
        if scorepartwiseC.name == "part-list"
            partlist = scorepartwiseC

            scoreParts = Any[]

            iPart = 1
            for partlistC in eachelement(partlist)

                # TODO part-group

                # Score Part
                if partlistC.name == "score-part"

                    scorePartI = scorepart()

                    scorePartI.ID = partlistC["id"]

                    for scorepartC in eachelement(partlistC)
                        if scorepartC == "part-name"
                            scorePartI.name = scorepartC.content
                        end
                        # TODO score-instrument
                        # TODO midi-device
                        if scorepartC == "midi-instrument"
                            midiinstrumentI = midiinstrument()
                            # TODO scorepartC["id"]
                            midiinstrumentI.channel = findfirst("/midi-channel",scorepartC)
                            midiinstrumentI.program = findfirst("/midi-program",scorepartC)
                            midiinstrumentI.volume = findfirst("/volume",scorepartC)
                            midiinstrumentI.pan = findfirst("/pan", scorepartC)
                            scorePartI.midiinstrument = midiinstrumentI
                        end
                    end
                    push!(scoreParts, scorePartI)
                    iPart = +1
                end  # Score Part


            end
            data.scoreParts = scoreParts
        end # Part List


    end # Score Partwise


    return data
end
################################################################
"""
    readmusicxml(filepath)

Reads musicxml file and extracts the data.

# Examples
```julia
data = readmusicxml(joinpath("examples", "musescore.musicxml"))
```
"""
function readmusicxml(filepath::String)
    doc = readxml(filepath) # read an XML document from a file
    data = extractdata(doc)
    return data
end
################################################################
"""
    parsemusicxml(s)

Parses musicxml from a string.

# Examples
```julia
data = parsemusicxml(s)
```
"""
function parsemusicxml(s::String)
    doc = parsexml(s) # Parse an XML string
    data = extractdata(doc)
    return data
end

end
